depart - nyc
time_diff  <- depart - nyc
time_diff
hours(time_diff)
days(time_diff)
hours <- time_diff * 24
hours
hours(time_diff)
hour(time_diff)
nxt()
depart
update(depart, `hour<-`17)
update(depart, hours = 17, minutes = 34)
update(depart, hours = 17, minutes = 34) -> depart
depart
depart + hours(15) + minutes(50)
depart + hours(15) + minutes(50) -> arrive
?with_tz
with_tz(arrive, tzone = 'Asia/Hong_Kong')
with_tz(arrive, tzone = 'Asia/Hong_Kong') -> arrive
arrive
mdy('June 17, 2008', tz = 'Singapore') -> last_time
last_time
?new_interval
new_interval(last_time, arrive) -> how_long
as.period(how_long)
year(how_long)
years(how_long)
how_long
as.period(how_long)
as.period(how_long, unit = 'year')
as.period(how_long, unit = 'years')
play()
as.period(how_long, unit = 'years')
as.period(how_long, unit = 'seconds')
as.period(how_long, unit = 'seconds') / 60 / 60 / 24 / 365
as.period(how_long, unit = 'seconds') / (60 / 60 / 24 / 365)
1 / 60 / 60 / 24 / 365 -> secs_a_year
as.period(how_long, unit = 'seconds') / secs_a_year
60 * 60 * 24 * 365
60 * 60 * 24 * 365 -> secs_a_year
as.period(how_long, unit = 'seconds') / secs_a_year
as.period(how_long, unit = 'seconds') / secs_a_year -> years_elapsed
as.numeric(years_elapsed)
as.numeric(as.period(how_long, unit = 'seconds') / secs_a_year)
as.numeric(as.period(how_long, unit = 'seconds') / secs_a_year);
nxt()
stopwatch()
library(dplyr)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
cran <- tbl_df(mydf)
rm('mydf')
cran
cran  %>% filter(grep('html', package))
cran  %>% filter(grepl('html', package))
cran$package
head(cran$package)
strsplit(cran$r_version)
strsplit(cran$r_version, '.')
head(strsplit(cran$r_version, '.'))
cran$r_version
head(cran$r_version)
head(cran$r_version)[1]
_
ans
answer
head(cran$r_version)[1] -> st
strsplit(st)
strsplit(st, '')
strsplit(st, '.')
strsplit(st, '0')
strsplit(st, .)
strsplit(st, '.')
strsplit(st, '.', fixed = TRUE)
strsplit(st, '.')
strsplit(st, '.', fixed = FALSE)
strsplit(st, '.', fixed = TRUE)
strsplit('aaaaa_bbbbb', '_')
strsplit('aaaaa_bbbbb', '.')
strsplit('aaaaa.bbbbb', '.')
strsplit('aaaaa.bbbbb', '.', fixed = TRUE)
strsplit('aaaaa.bbbbb', '_', fixed = TRUE)
strsplit('aaaaa_bbbbb', '_', fixed = TRUE)
paste('aaa', 'bbbb', 'cccc')
paste('aaa', 'bbbb', 'cccc', sep = '_')
soft_data <- fread('/Users/aflyax/Documents/git/ds-product-reports/src/productReports/software_implementation.csv')
library(shiny)
library(DT)
library(data.table)
library(dplyr)
library(lubridate)
library(tidyr)
soft_data <- fread('/Users/aflyax/Documents/git/ds-product-reports/src/productReports/software_implementation.csv')
soft_data[, software_version := paste(SW_Release, ' ', SW_PartNum)]
write.csv(soft_data, row.names = F, file = 'software_implementation.csv')
locomotive_models <- read.csv("~/Documents/git/ds-helper-funs/railhelperfuns/inst/extdata/locomotive_models.csv")
View(locomotive_models)
rm(list = ls())
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
rm(list = ls())
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
library(DT)
library(shiny)
library(DT)
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
#     # force binning on a numeric vector that's too long
#
#     if(length(unique(summary_data[, get(X_col())])) > 1000 &
#        is.numeric(summary_data[, get(X_col())])){
#
#       print('got here -- X')
#
#       # binned_vector <- returnDataWithCovBinned( summary_data[, get(y_col())] )$covFactor
#
#       # print('done binned it')
#
#       summary_data <- summary_data[,
#                     (X_col()) := returnDataWithCovBinned( summary_data[, get(X_col())] )$covFactor
#                                    ]
#
#       print('done updated it to the bin -- X')
#     }
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
throttle_head_100K <- read.csv("~/Documents/Projects/product_reports/data/misc/throttle_head_100K.csv")
View(throttle_head_100K)
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
get_filtered_csv <- function(file_name, col_str = '{print $1 \",\" $2}'){
col_str <- get_col_str()
header_str <- paste('head -n 1'
, file_name
, "| awk -F , \'NR==1"
, '{print '
, col_str
, "} ' | sed 's/\"//g'"
)
#   print('header:')
#   print(header_str)
str_paral <- paste('tail -n +2'
, file_name
, "| parallel -k -q --block 440M --pipe awk -F , '"
, filter_str
, '{print '
, col_str
, "} '"
)
#   print('awk str:')
#   print(str_paral)
print('loading...')
data.table(read.csv(pipe(str_paral)
, header = FALSE
, col.names = unlist(strsplit(system(header_str, intern = TRUE), ','))
)
)
}
get_col_str <- function(col_names) {
col_ix = sapply(col_names, get_col_index_from_file)
return(paste(paste('$', col_ix, sep = ''), collapse = ' "," '))
}
get_col_index_from_file <- function(colname, filepath) {
sys_str <- paste('csvcut -n',
filepath,
'| grep',
colname,
'| grep -E -o [0-9]+'
)
system(sys_str, intern = TRUE)
}
filename <- '/Users/aflyax/Documents/Projects/product_reports/data/misc/throttle_head_100K.csv'
get_filtered_csv <- function(file_name, cols){
col_str <- get_col_str()
header_str <- paste('head -n 1'
, file_name
, "| awk -F , \'NR==1"
, '{print '
, col_str
, "} ' | sed 's/\"//g'"
)
#   print('header:')
#   print(header_str)
str_paral <- paste('tail -n +2'
, file_name
, "| parallel -k -q --block 440M --pipe awk -F , '"
, filter_str
, '{print '
, col_str
, "} '"
)
#   print('awk str:')
#   print(str_paral)
print('loading...')
data.table(read.csv(pipe(str_paral)
, header = FALSE
, col.names = unlist(strsplit(system(header_str, intern = TRUE), ','))
)
)
}
get_col_str <- function(col_names) {
col_ix = sapply(col_names, get_col_index_from_file)
return(paste(paste('$', col_ix, sep = ''), collapse = ' "," '))
}
get_col_index_from_file <- function(colname, filepath) {
sys_str <- paste('csvcut -n',
filepath,
'| grep',
colname,
'| grep -E -o [0-9]+'
)
system(sys_str, intern = TRUE)
}
get_filtered_csv <- function(file_name, col_names){
col_str <- get_col_str()
header_str <- paste('head -n 1'
, file_name
, "| awk -F , \'NR==1"
, '{print '
, col_str
, "} ' | sed 's/\"//g'"
)
#   print('header:')
#   print(header_str)
str_paral <- paste('tail -n +2'
, file_name
, "| parallel -k -q --block 440M --pipe awk -F , '"
, filter_str
, '{print '
, col_str
, "} '"
)
#   print('awk str:')
#   print(str_paral)
print('loading...')
data.table(read.csv(pipe(str_paral)
, header = FALSE
, col.names = unlist(strsplit(system(header_str, intern = TRUE), ','))
)
)
}
get_col_str <- function(col_names) {
col_ix = sapply(col_names, get_col_index_from_file)
return(paste(paste('$', col_ix, sep = ''), collapse = ' "," '))
}
get_col_index_from_file <- function(colname, filepath) {
sys_str <- paste('csvcut -n',
filepath,
'| grep',
colname,
'| grep -E -o [0-9]+'
)
system(sys_str, intern = TRUE)
}
get_filtered_csv <- function(filepath, col_names){
col_str <- get_col_str(filepath, col_names)
header_str <- paste('head -n 1'
, filepath
, "| awk -F , \'NR==1"
, '{print '
, col_str
, "} ' | sed 's/\"//g'"
)
#   print('header:')
#   print(header_str)
str_paral <- paste('tail -n +2'
, filepath
, "| parallel -k -q --block 440M --pipe awk -F , '"
, filter_str
, '{print '
, col_str
, "} '"
)
#   print('awk str:')
#   print(str_paral)
print('loading...')
data.table(read.csv(pipe(str_paral)
, header = FALSE
, col.names = unlist(strsplit(system(header_str, intern = TRUE), ','))
)
)
}
get_col_str <- function(col_names, filepath) {
col_ix = sapply(col_names, get_col_index_from_file(filepath = filepath))
return(paste(paste('$', col_ix, sep = ''), collapse = ' "," '))
}
get_col_index_from_file <- function(colname, filepath) {
sys_str <- paste('csvcut -n',
filepath,
'| grep',
colname,
'| grep -E -o [0-9]+'
)
system(sys_str, intern = TRUE)
}
get_filtered_csv <- function(filepath, col_names){
col_str <- get_col_str(filepath, col_names)
header_str <- paste('head -n 1'
, filepath
, "| awk -F , \'NR==1"
, '{print '
, col_str
, "} ' | sed 's/\"//g'"
)
#   print('header:')
#   print(header_str)
str_paral <- paste('tail -n +2'
, filepath
, "| parallel -k -q --block 440M --pipe awk -F , '"
, filter_str
, '{print '
, col_str
, "} '"
)
#   print('awk str:')
#   print(str_paral)
print('loading...')
data.table(read.csv(pipe(str_paral)
, header = FALSE
, col.names = unlist(strsplit(system(header_str, intern = TRUE), ','))
)
)
}
get_col_str <- function(col_names, filepath) {
col_ix = sapply(col_names, get_col_index_from_file(filepath = filepath))
return(paste(paste('$', col_ix, sep = ''), collapse = ' "," '))
}
get_col_index_from_file <- function(colname, filepath) {
sys_str <- paste('csvcut -n',
filepath,
'| grep',
colname,
'| grep -E -o [0-9]+'
)
system(sys_str, intern = TRUE)
}
filename <- '/Users/aflyax/Documents/Projects/product_reports/data/misc/throttle_head_100K.csv'
get_csv(filename, 'name')
f_csv <- get_filtered_csv(filename, 'name')
get_col_index_from_file(colname = 'name', filepath = filename)
print(sys_str)
get_col_index_from_file <- function(colname, filepath) {
sys_str <- paste('csvcut -n',
filepath,
'| grep',
colname,
'| grep -E -o [0-9]+'
)
print(sys_str)
system(sys_str, intern = TRUE)
}
print(sys_str)
get_col_index_from_file(colname = 'name', filepath = filename)
sys_str <- 'csvcut -n /Users/aflyax/Documents/Projects/product_reports/data/misc/throttle_head_100K.csv | grep name | grep -E -o [0-9]+'
system(sys_str, intern=TRUE)
sys_str
install.packages("Rcmdr", dependencies = TRUE)
system('pip install csvkit')
sys_str <- 'csvcut -n /Users/aflyax/Documents/Projects/product_reports/data/misc/throttle_head_100K.csv | grep name | grep -E -o [0-9]+'
system(sys_str)
str <- 'BEGIN{
OFS=FS=","
split(target, t_targets, ",")
for (i in t_targets)
targets[t_targets[i]] = i
}'
str
system('echo day | sed s/day/night/ ')
sys_str <- 'csvcut -n /Users/aflyax/Documents/Projects/product_reports/data/misc/throttle_head_100K.csv | grep name | grep -E -o [0-9]+'
system(sys_str)
system('echo day | sed s/day/night/ ')
system(sys_str)
sys_str <- 'csvcut -n /Users/aflyax/Documents/Projects/product_reports/data/misc/throttle_head_100K.csv | grep name | grep -E -o [0-9]+'
system(sys_str)
system('echo day | sed s/day/night/ ')
system(sys_str)
system('echo day | sed s/day/night/ ')
q
q()
system('pip install csvkit')
system('pip install csvkit')
system('env')
system('export PATH=$PATH:/anaconda3/anaconda/bin')
system('env')
system('PATH=$PATH:/anaconda3/anaconda/bin')
system('env')
system('/anaconda3/anaconda/bin/csvkit')
system('/anaconda3/anaconda/bin/csv')
system('/anaconda3/anaconda/bin/csvstat')
system('env')
?Startup
system('pip install csvkit')
system('pip install csvkit')
R_system_version()
R_Home
R.home
R.home()
system('pip install csvkit')
system('/anaconda3/anaconda/bin/pip install csvkit')
system('which pip')
system('which pip', intern=TRUE)
system('which pip')
system('which csvcut')
system('pip install csvkit')
system('/anaconda3/anaconda/bin/pip install csvkit')
R.home()
Sys.getenv('R_LIBS_USER')
system('pip install csvkit')
system('pip install csvkit')
R.home()
system('pip install csvkit')
system('env')
system('env')
system('env')
system('env')
system('env')
system('env')
system('env')
system('pip install csvkit')
R.home()
system('pip install csvkit')
R.home()
system('env')
system('pip install csvkit')
if (!require(devtools))
install.packages("devtools")
devtools::install_github("rstudio/leaflet")
shiny::runGitHub("rstudio/shiny-examples", subdir="063-superzip-example")
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
y <- rnorm(4000000)
X <- rnorm(4000000)
y <- y > 0
system.time(glm(y ~ X, family = binomial))
X <- rnorm(40000)
X <- rnorm(40000)
y <- y > 0
system.time(glm(y ~ X, family = binomial))
dim(X)
length(X)
length(y)
y <- rnorm(40000)
length(X)
y <- y > 0
system.time(glm(y ~ X, family = binomial))
system.time(speedglm(y ~ X, family = binomial()))
install.packages('speedglm')
system.time(speedglm(y ~ X, family = binomial()))
library(speedglm)
system.time(speedglm(y ~ X, family = binomial()))
df <- data.frame(X = X, y = y)
system.time(speedglm(data = df, y ~ X, family = binomial()))
system.time(glm(y ~ X, family = binomial))
0.118 / 0.064
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
UsePackages('railhelperfuns')
computePvalueForVar
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
significanceTestPoisModel
fitRegressionModelFast()
fitRegressionModelFast
shiny::runApp('~/Documents/git/ds-product-reports/src/productReports')
runGitHub(repo = 'ShinyApps/simple_regression', username = 'mwaskom')
runGitHub(repo = 'ShinyApps', username = 'mwaskom',)
runGitHub(repo = 'ShinyApps', username = 'mwaskom',ref = )
runGitHub(repo = 'ShinyApps', username = 'mwaskom',subdir = 'simple_regression')
#if not already installed, uncomment the two lines below
library(devtools)
install_github("clickme", "nachocab")
require(clickme)
#set location where you put your multiline ractive
# set_root_path("path to your ractive/r")
data = list(
list(name="people",
values=list(
list(label="Washington", born=-7506057600000, died=-5365324800000, enter=-5701424400000, leave=-5453884800000),
list(label="Adams", born=-7389766800000, died=-4528285200000, enter=-5453884800000, leave=-5327740800000),
list(label="Jefferson", born=-7154586000000, died=-4528285200000, enter=-5327740800000, leave=-5075280000000),
list(label="Madison", born=-6904544400000, died=-4213184400000, enter=-5075280000000, leave=-4822819200000),
list(label="Monroe", born=-6679904400000, died=-4370518800000, enter=-4822819200000, leave=-4570358400000)
)
),
list(
name= "events",
format= list(type="json", parse=list(when="date")),
values= list(
list(name="Decl. of Independence", when="July 4, 1776"),
list(name="U.S. Constitution",     when="3/4/1789"),
list(name="Louisiana Purchase",    when="April 30, 1803"),
list(name="Monroe Doctrine",       when="Dec 2, 1823")
)
)
)
clickme_vega(data,"lifelines",params=list(height=100,width=400,padding=list(top=60, left=5, bottom= 30, right=30)))
system('ls -lh')
install.packages('rjson')
library(arm)
shiny::runApp('~/Documents/git/tech_talk_shiny')
shiny::runApp('~/Documents/git/tech_talk_shiny')
shiny::runApp('~/Documents/git/tech_talk_shiny')
shiny::runApp('~/Documents/git/tech_talk_shiny')
setwd("~/Documents/git/tech_talk_shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
